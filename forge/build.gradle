archivesBaseName = archivesBaseName + "-FORGE"

configurations {
    common
    shadow
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    include
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

mixin {
    add sourceSets.main, "jsmacros-forge.refmap.json"
    defaultObfuscationEnv searge
}

dependencies {
    runtime "org.graalvm.sdk:graal-sdk:${project.graal_version}"
    runtime "org.graalvm.js:js:${project.graal_version}"
    runtime "org.graalvm.truffle:truffle-api:${project.graal_version}"
    runtime "org.graalvm.regex:regex:${project.graal_version}"
//		localRuntime "org.graalvm.compiler:compiler:${project.graal_version}"
//		localRuntime "org.graalvm.compiler:compiler-management:${project.graal_version}"

    include "io.noties:prism4j:${project.prism_version}", {
        exclude module: "annotations-java5"
    }

    include 'com.ibm.icu:icu4j:70.1'
    include "com.neovisionaries:nv-websocket-client:2.10"
    include "org.javassist:javassist:3.28.0-GA"
    include "com.mojang:brigadier:${project.brigadier_version}"

    include "com.mojang:brigadier:${project.brigadier_version}"

    implementation 'org.spongepowered:mixin:0.7.11-SNAPSHOT'
    shadowCommon "org.spongepowered:mixin:0.7.11-SNAPSHOT"

    common(project(path: ":common")) { transitive false }

    //ij wasn't seeing this, even tho it's part of namedElements...
    implementation(project(":common").sourceSets.core.output)
    shadowCommon(project(path: ":common")) { transitive false }

    common(project(path: ":javascript_extension")) { transitive false }
    jsmacrosExtensionInclude(project(path: ":javascript_extension")) { transitive false }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version


    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    filesMatching("jsmacros.extension.json") {
        expand "dependencies": configurations.jsmacrosExtensionInclude.files.collect { it.name }.join(" ")
    }
}

jar {
    manifest {
        attributes([
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'FMLCorePlugin': 'xyz.wagyourtail.jsmacros.forge.client.JsMacrosEarlyRiser',
                'JsMacrosDeps': configurations.include.files.collect { it.name }.join(" "),
                'FMLCorePluginContainsFMLMod': true,
                'ForceLoadAsMod': true
        ])
    }

    from(configurations.include.files) {
        include '*'
        into 'META-INF/jars/'
    }

    from (configurations.jsmacrosExtensionInclude.files) {
        include '*'
        into "META-INF/jsmacrosdeps"
    }

    from {
        configurations.shadow.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from {
        configurations.shadowCommon.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

task createDist(type: Copy) {
    from(new File(project.buildDir, "libs"))
    into new File(rootProject.rootDir, "dist")
}

build.finalizedBy(createDist)